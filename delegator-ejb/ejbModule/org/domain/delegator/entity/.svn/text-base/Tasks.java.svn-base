package org.domain.delegator.entity;

// Generated 00:56:58 13/09/2009 by Hibernate Tools 3.2.4.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * Tasks generated by hbm2java
 */
@Entity
@Table(name = "tasks", catalog = "dropdb")
public class Tasks implements java.io.Serializable {

	private Integer tid;
	private Employee employee;
	private Date cdate;
	private Date edate;
	private Date finishedDate;
	private String title;
	private String description;
	private String attachment;
	private String status;
	private boolean flagged;
	private boolean delegated;
	private Set<TasksC> tasksCsForRootTaskId = new HashSet<TasksC>(0);
	private Set<DoneBy> doneBies = new HashSet<DoneBy>(0);
	private Set<TasksC> tasksCsForParentTaskId = new HashSet<TasksC>(0);
	private TasksC tasksCByTid;
	private Updates updates;
	
	private String textDecorations = "";

	public Tasks() {
	}

	public Tasks(Employee employee, Date cdate, Date edate, Date finishedDate,
			String title, String status, boolean flagged, boolean delegated) {
		this.employee = employee;
		this.cdate = cdate;
		this.edate = edate;
		this.finishedDate = finishedDate;
		this.title = title;
		this.status = status;
		this.flagged = flagged;
		this.delegated = delegated;
	}

	public Tasks(Employee employee, Date cdate, Date edate, Date finishedDate,
			String title, String description, String attachment, String status,
			boolean flagged, boolean delegated,
			Set<TasksC> tasksCsForRootTaskId, Set<DoneBy> doneBies,
			Set<TasksC> tasksCsForParentTaskId, TasksC tasksCByTid,
			Updates updates) {
		this.employee = employee;
		this.cdate = cdate;
		this.edate = edate;
		this.finishedDate = finishedDate;
		this.title = title;
		this.description = description;
		this.attachment = attachment;
		this.status = status;
		this.flagged = flagged;
		this.delegated = delegated;
		this.tasksCsForRootTaskId = tasksCsForRootTaskId;
		this.doneBies = doneBies;
		this.tasksCsForParentTaskId = tasksCsForParentTaskId;
		this.tasksCByTid = tasksCByTid;
		this.updates = updates;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "Tid", unique = true, nullable = false)
	public Integer getTid() {
		return this.tid;
	}

	public void setTid(Integer tid) {
		this.tid = tid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CreatorId", nullable = false)
	@NotNull
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@GeneratedValue
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CDate", length = 19)
	public Date getCdate() {
		return this.cdate;
	}

	public void setCdate(Date cdate) {
		this.cdate = cdate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "EDate", length = 19)
	public Date getEdate() {
		return this.edate;
	}

	public void setEdate(Date edate) {
		this.edate = edate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "FinishedDate", length = 19)
	public Date getFinishedDate() {
		return this.finishedDate;
	}

	public void setFinishedDate(Date finishedDate) {
		this.finishedDate = finishedDate;
	}

	@Column(name = "Title", nullable = false)
	@NotNull
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "Description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "Attachment")
	public String getAttachment() {
		return this.attachment;
	}

	public void setAttachment(String attachment) {
		this.attachment = attachment;
	}

	@Column(name = "Status", nullable = false, length = 15)
	@NotNull
	@Length(max = 15)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "Flagged", nullable = false)
	@NotNull
	public boolean getFlagged() {
		return this.flagged;
	}

	public void setFlagged(boolean flagged) {
		this.flagged = flagged;
	}

	@Column(name = "Delegated", nullable = false)
	@NotNull
	public boolean getDelegated() {
		return delegated;
	}

	public void setDelegated(boolean delegated) {
		this.delegated = delegated;
	}

	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tasksByRootTaskId")
	public Set<TasksC> getTasksCsForRootTaskId() {
		return this.tasksCsForRootTaskId;
	}

	public void setTasksCsForRootTaskId(Set<TasksC> tasksCsForRootTaskId) {
		this.tasksCsForRootTaskId = tasksCsForRootTaskId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tasks")
	public Set<DoneBy> getDoneBies() {
		return this.doneBies;
	}

	public void setDoneBies(Set<DoneBy> doneBies) {
		this.doneBies = doneBies;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tasksByParentTaskId")
	public Set<TasksC> getTasksCsForParentTaskId() {
		return this.tasksCsForParentTaskId;
	}

	public void setTasksCsForParentTaskId(Set<TasksC> tasksCsForParentTaskId) {
		this.tasksCsForParentTaskId = tasksCsForParentTaskId;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "tasksByTid")
	public TasksC getTasksCByTid() {
		return this.tasksCByTid;
	}

	public void setTasksCByTid(TasksC tasksCByTid) {
		this.tasksCByTid = tasksCByTid;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "tasks")
	public Updates getUpdates() {
		return this.updates;
	}

	public void setUpdates(Updates updates) {
		this.updates = updates;
	}
	
	public String newmarkings(){
		
		// Done Bies Markings :
		Iterator<DoneBy> itr = doneBies.iterator();
		DoneBy dbies = itr.next();
		if (dbies.getChanged() == 1)
			textDecorations += "font-weight:bolder;";
		
		// Past Deadline Marking:
		if (edate != null && (new Date().compareTo(edate) > 0 ))
			textDecorations += "color:Red;";
		
		return textDecorations;
	}
	
	public String markings(){
		return textDecorations;
	}	
	
}
